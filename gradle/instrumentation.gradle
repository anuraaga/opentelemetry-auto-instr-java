// common gradle file for instrumentation
import io.opentelemetry.instrumentation.gradle.bytebuddy.ByteBuddyPluginConfigurator

apply plugin: 'net.bytebuddy.byte-buddy'
apply plugin: 'muzzle'
apply plugin: 'com.github.johnrengelman.shadow'

ext {
  packageInAgentBundle = true
  mavenGroupId = 'io.opentelemetry.javaagent.instrumentation'
}

apply from: "$rootDir/gradle/java.gradle"
if (project.ext.find("skipPublish") != true) {
  apply from: "$rootDir/gradle/publish.gradle"
}

apply from: "$rootDir/gradle/instrumentation-common.gradle"

if (projectDir.name == 'javaagent') {
  archivesBaseName = projectDir.parentFile.name
}

afterEvaluate {
  dependencies {
    compileOnly project(':instrumentation-api')
    compileOnly project(':javaagent-api')
    // Apply common dependencies for instrumentation.
    compileOnly(project(':javaagent-tooling')) {
      // OpenTelemetry SDK is not needed for compilation, and :opentelemetry-sdk-shaded-for-testing
      // is brought in for tests by project(:testing-common) below
      exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk'
    }
    implementation deps.bytebuddy
    annotationProcessor deps.autoservice
    implementation deps.autoservice
    implementation deps.slf4j

    // Include instrumentations instrumenting core JDK classes tp ensure interoperability with other instrumentation
    testImplementation project(':instrumentation:java-concurrent')
    // FIXME: we should enable this, but currently this fails tests for google http client
    //testImplementation project(':instrumentation:http-url-connection')
    testImplementation project(':instrumentation:java-classloader')

    testImplementation project(':testing-common')
    testAnnotationProcessor deps.autoservice
    testImplementation deps.autoservice
    testImplementation project(':utils:test-utils')

    testImplementation deps.testcontainers
  }

  def pluginName = 'io.opentelemetry.javaagent.tooling.muzzle.collector.MuzzleCodeGenerationPlugin'
  new ByteBuddyPluginConfigurator(project, sourceSets.main, pluginName, [
    project(':javaagent-tooling').configurations.instrumentationMuzzle.files,
    configurations.runtimeClasspath.files,
    sourceSets.main.output.files
  ]).configure()
}

shadowJar {
  mergeServiceFiles()

  archiveFileName = 'agent-testing.jar'

  dependencies {
    exclude(project(':javaagent-bootstrap'))
  }

  // rewrite library instrumentation dependencies
  relocate("io.opentelemetry.instrumentation", "io.opentelemetry.javaagent.shaded.instrumentation") {
    exclude "io.opentelemetry.javaagent.instrumentation.**"
  }

  // rewrite dependencies calling Logger.getLogger
  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'

  // prevents conflict with library instrumentation
  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'

  // relocate OpenTelemetry API usage
  relocate "io.opentelemetry.api", "io.opentelemetry.javaagent.shaded.io.opentelemetry.api"
  relocate "io.opentelemetry.context", "io.opentelemetry.javaagent.shaded.io.opentelemetry.context"

  // this is for instrumentation on opentelemetry-api itself
  relocate "application.io.opentelemetry", "io.opentelemetry"
}

tasks.withType(Test).configureEach {
  jvmArgs "-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug"
  jvmArgs "-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"
  jvmArgs "-Dnet.bytebuddy.raw=true"
  jvmArgs "-javaagent:${project(":testing:agent-for-testing").buildDir}/libs/javaagent-for-testing.jar"
  jvmArgs "-Dotel.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}"

  dependsOn shadowJar
  dependsOn ":testing:agent-for-testing:shadowJar"
}