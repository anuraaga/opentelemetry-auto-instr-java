/** Common setup for manual instrumentation of libraries and auto instrumentation. */

def testLatestDeps = findProperty('testLatestDeps')
configurations {
  // library is where to define dependencies on the library that is being instrumented. It will not
  // be packaged in the agent but will be available at runtime for tests.
  library {
    canBeResolved = false
    canBeConsumed = false
  }
  testLibrary {
    canBeResolved = false
    canBeConsumed = false
  }
  latestDepTestLibrary {
    canBeResolved = false
    canBeConsumed = false
  }
  [library, testLibrary].each {configuration ->
    // We use whenObjectAdded and copy into the real configurations instead of extension to allow
    // mutating the version for latest dep tests.
    configuration.dependencies.whenObjectAdded {
      def dep = it.copy()
      if (testLatestDeps) {
        dep.version {
          it.require '+'
        }
      }
      testImplementation.dependencies.add(dep)
    }
  }
  if (testLatestDeps) {
    latestDepTestLibrary.dependencies.whenObjectAdded {
      def dep = it.copy()
      def declaredVersion = dep.version
      dep.version {
        it.strictly declaredVersion
      }
      testImplementation.dependencies.add(dep)
    }
  }
  compileOnly.extendsFrom(library)
}

if (testLatestDeps) {
  afterEvaluate {
    def latestDepTest = tasks.findByName('latestDepTest')
    if (latestDepTest) {
      tasks.test.dependsOn latestDepTest
    }
  }
}
